//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebService.UserService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUser", Namespace="http://schemas.datacontract.org/2004/07/Domain.Entity.WiEntity")]
    [System.SerializableAttribute()]
    public partial class AspNetUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessFailedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebService.UserService.AspNetRole> AspNetRolesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebService.UserService.AspNetUserClaim> AspNetUserClaimsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebService.UserService.AspNetUserLogin> AspNetUserLoginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmailConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockoutEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LockoutEndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PhoneNumberConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TwoFactorEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessFailedCount {
            get {
                return this.AccessFailedCountField;
            }
            set {
                if ((this.AccessFailedCountField.Equals(value) != true)) {
                    this.AccessFailedCountField = value;
                    this.RaisePropertyChanged("AccessFailedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebService.UserService.AspNetRole> AspNetRoles {
            get {
                return this.AspNetRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetRolesField, value) != true)) {
                    this.AspNetRolesField = value;
                    this.RaisePropertyChanged("AspNetRoles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebService.UserService.AspNetUserClaim> AspNetUserClaims {
            get {
                return this.AspNetUserClaimsField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserClaimsField, value) != true)) {
                    this.AspNetUserClaimsField = value;
                    this.RaisePropertyChanged("AspNetUserClaims");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebService.UserService.AspNetUserLogin> AspNetUserLogins {
            get {
                return this.AspNetUserLoginsField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserLoginsField, value) != true)) {
                    this.AspNetUserLoginsField = value;
                    this.RaisePropertyChanged("AspNetUserLogins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EmailConfirmed {
            get {
                return this.EmailConfirmedField;
            }
            set {
                if ((this.EmailConfirmedField.Equals(value) != true)) {
                    this.EmailConfirmedField = value;
                    this.RaisePropertyChanged("EmailConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockoutEnabled {
            get {
                return this.LockoutEnabledField;
            }
            set {
                if ((this.LockoutEnabledField.Equals(value) != true)) {
                    this.LockoutEnabledField = value;
                    this.RaisePropertyChanged("LockoutEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LockoutEndDateUtc {
            get {
                return this.LockoutEndDateUtcField;
            }
            set {
                if ((this.LockoutEndDateUtcField.Equals(value) != true)) {
                    this.LockoutEndDateUtcField = value;
                    this.RaisePropertyChanged("LockoutEndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PhoneNumberConfirmed {
            get {
                return this.PhoneNumberConfirmedField;
            }
            set {
                if ((this.PhoneNumberConfirmedField.Equals(value) != true)) {
                    this.PhoneNumberConfirmedField = value;
                    this.RaisePropertyChanged("PhoneNumberConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityStamp {
            get {
                return this.SecurityStampField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityStampField, value) != true)) {
                    this.SecurityStampField = value;
                    this.RaisePropertyChanged("SecurityStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TwoFactorEnabled {
            get {
                return this.TwoFactorEnabledField;
            }
            set {
                if ((this.TwoFactorEnabledField.Equals(value) != true)) {
                    this.TwoFactorEnabledField = value;
                    this.RaisePropertyChanged("TwoFactorEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetRole", Namespace="http://schemas.datacontract.org/2004/07/Domain.Entity.WiEntity")]
    [System.SerializableAttribute()]
    public partial class AspNetRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WebService.UserService.AspNetUser> _usersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WebService.UserService.AspNetUser> _users {
            get {
                return this._usersField;
            }
            set {
                if ((object.ReferenceEquals(this._usersField, value) != true)) {
                    this._usersField = value;
                    this.RaisePropertyChanged("_users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserClaim", Namespace="http://schemas.datacontract.org/2004/07/Domain.Entity.WiEntity")]
    [System.SerializableAttribute()]
    public partial class AspNetUserClaim : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebService.UserService.AspNetUser AspNetUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebService.UserService.AspNetUser AspNetUser {
            get {
                return this.AspNetUserField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserField, value) != true)) {
                    this.AspNetUserField = value;
                    this.RaisePropertyChanged("AspNetUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimType {
            get {
                return this.ClaimTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimTypeField, value) != true)) {
                    this.ClaimTypeField = value;
                    this.RaisePropertyChanged("ClaimType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimValue {
            get {
                return this.ClaimValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimValueField, value) != true)) {
                    this.ClaimValueField = value;
                    this.RaisePropertyChanged("ClaimValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AspNetUserLogin", Namespace="http://schemas.datacontract.org/2004/07/Domain.Entity.WiEntity")]
    [System.SerializableAttribute()]
    public partial class AspNetUserLogin : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebService.UserService.AspNetUser AspNetUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginProviderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebService.UserService.AspNetUser AspNetUser {
            get {
                return this.AspNetUserField;
            }
            set {
                if ((object.ReferenceEquals(this.AspNetUserField, value) != true)) {
                    this.AspNetUserField = value;
                    this.RaisePropertyChanged("AspNetUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoginProvider {
            get {
                return this.LoginProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginProviderField, value) != true)) {
                    this.LoginProviderField = value;
                    this.RaisePropertyChanged("LoginProvider");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderKey {
            get {
                return this.ProviderKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderKeyField, value) != true)) {
                    this.ProviderKeyField = value;
                    this.RaisePropertyChanged("ProviderKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Add", ReplyAction="http://tempuri.org/IUserService/AddResponse")]
        System.Guid Add(WebService.UserService.AspNetUser dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Add", ReplyAction="http://tempuri.org/IUserService/AddResponse")]
        System.Threading.Tasks.Task<System.Guid> AddAsync(WebService.UserService.AspNetUser dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        bool Delete(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Edit", ReplyAction="http://tempuri.org/IUserService/EditResponse")]
        bool Edit(WebService.UserService.AspNetUser dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Edit", ReplyAction="http://tempuri.org/IUserService/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(WebService.UserService.AspNetUser dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/editForAdm", ReplyAction="http://tempuri.org/IUserService/editForAdmResponse")]
        void editForAdm(System.Guid id, string fullname, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/editForAdm", ReplyAction="http://tempuri.org/IUserService/editForAdmResponse")]
        System.Threading.Tasks.Task editForAdmAsync(System.Guid id, string fullname, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Exists", ReplyAction="http://tempuri.org/IUserService/ExistsResponse")]
        bool Exists(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Exists", ReplyAction="http://tempuri.org/IUserService/ExistsResponse")]
        System.Threading.Tasks.Task<bool> ExistsAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        System.Collections.Generic.List<WebService.UserService.AspNetUser> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebService.UserService.AspNetUser>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetById", ReplyAction="http://tempuri.org/IUserService/GetByIdResponse")]
        WebService.UserService.AspNetUser GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetById", ReplyAction="http://tempuri.org/IUserService/GetByIdResponse")]
        System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersByRole", ReplyAction="http://tempuri.org/IUserService/GetUsersByRoleResponse")]
        System.Collections.Generic.List<WebService.UserService.AspNetUser> GetUsersByRole(string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersByRole", ReplyAction="http://tempuri.org/IUserService/GetUsersByRoleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WebService.UserService.AspNetUser>> GetUsersByRoleAsync(string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/HasRole", ReplyAction="http://tempuri.org/IUserService/HasRoleResponse")]
        bool HasRole(System.Guid id, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/HasRole", ReplyAction="http://tempuri.org/IUserService/HasRoleResponse")]
        System.Threading.Tasks.Task<bool> HasRoleAsync(System.Guid id, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailUnique", ReplyAction="http://tempuri.org/IUserService/IsEmailUniqueResponse")]
        bool IsEmailUnique(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsEmailUnique", ReplyAction="http://tempuri.org/IUserService/IsEmailUniqueResponse")]
        System.Threading.Tasks.Task<bool> IsEmailUniqueAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByName", ReplyAction="http://tempuri.org/IUserService/GetByNameResponse")]
        WebService.UserService.AspNetUser GetByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByName", ReplyAction="http://tempuri.org/IUserService/GetByNameResponse")]
        System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByProviderAndKey", ReplyAction="http://tempuri.org/IUserService/GetByProviderAndKeyResponse")]
        WebService.UserService.AspNetUserLogin GetByProviderAndKey(string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByProviderAndKey", ReplyAction="http://tempuri.org/IUserService/GetByProviderAndKeyResponse")]
        System.Threading.Tasks.Task<WebService.UserService.AspNetUserLogin> GetByProviderAndKeyAsync(string loginProvider, string providerKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRolebyName", ReplyAction="http://tempuri.org/IUserService/GetRolebyNameResponse")]
        WebService.UserService.AspNetRole GetRolebyName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRolebyName", ReplyAction="http://tempuri.org/IUserService/GetRolebyNameResponse")]
        System.Threading.Tasks.Task<WebService.UserService.AspNetRole> GetRolebyNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByEmail", ReplyAction="http://tempuri.org/IUserService/GetByEmailResponse")]
        WebService.UserService.AspNetUser GetByEmail(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByEmail", ReplyAction="http://tempuri.org/IUserService/GetByEmailResponse")]
        System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByEmailAsync(string mail);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : WebService.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<WebService.UserService.IUserService>, WebService.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid Add(WebService.UserService.AspNetUser dto) {
            return base.Channel.Add(dto);
        }
        
        public System.Threading.Tasks.Task<System.Guid> AddAsync(WebService.UserService.AspNetUser dto) {
            return base.Channel.AddAsync(dto);
        }
        
        public bool Delete(System.Guid id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(System.Guid id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public bool Edit(WebService.UserService.AspNetUser dto) {
            return base.Channel.Edit(dto);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(WebService.UserService.AspNetUser dto) {
            return base.Channel.EditAsync(dto);
        }
        
        public void editForAdm(System.Guid id, string fullname, string userName) {
            base.Channel.editForAdm(id, fullname, userName);
        }
        
        public System.Threading.Tasks.Task editForAdmAsync(System.Guid id, string fullname, string userName) {
            return base.Channel.editForAdmAsync(id, fullname, userName);
        }
        
        public bool Exists(System.Guid id) {
            return base.Channel.Exists(id);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsAsync(System.Guid id) {
            return base.Channel.ExistsAsync(id);
        }
        
        public System.Collections.Generic.List<WebService.UserService.AspNetUser> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebService.UserService.AspNetUser>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public WebService.UserService.AspNetUser GetById(System.Guid id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Collections.Generic.List<WebService.UserService.AspNetUser> GetUsersByRole(string role) {
            return base.Channel.GetUsersByRole(role);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WebService.UserService.AspNetUser>> GetUsersByRoleAsync(string role) {
            return base.Channel.GetUsersByRoleAsync(role);
        }
        
        public bool HasRole(System.Guid id, string role) {
            return base.Channel.HasRole(id, role);
        }
        
        public System.Threading.Tasks.Task<bool> HasRoleAsync(System.Guid id, string role) {
            return base.Channel.HasRoleAsync(id, role);
        }
        
        public bool IsEmailUnique(string email) {
            return base.Channel.IsEmailUnique(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailUniqueAsync(string email) {
            return base.Channel.IsEmailUniqueAsync(email);
        }
        
        public WebService.UserService.AspNetUser GetByName(string name) {
            return base.Channel.GetByName(name);
        }
        
        public System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByNameAsync(string name) {
            return base.Channel.GetByNameAsync(name);
        }
        
        public WebService.UserService.AspNetUserLogin GetByProviderAndKey(string loginProvider, string providerKey) {
            return base.Channel.GetByProviderAndKey(loginProvider, providerKey);
        }
        
        public System.Threading.Tasks.Task<WebService.UserService.AspNetUserLogin> GetByProviderAndKeyAsync(string loginProvider, string providerKey) {
            return base.Channel.GetByProviderAndKeyAsync(loginProvider, providerKey);
        }
        
        public WebService.UserService.AspNetRole GetRolebyName(string name) {
            return base.Channel.GetRolebyName(name);
        }
        
        public System.Threading.Tasks.Task<WebService.UserService.AspNetRole> GetRolebyNameAsync(string name) {
            return base.Channel.GetRolebyNameAsync(name);
        }
        
        public WebService.UserService.AspNetUser GetByEmail(string mail) {
            return base.Channel.GetByEmail(mail);
        }
        
        public System.Threading.Tasks.Task<WebService.UserService.AspNetUser> GetByEmailAsync(string mail) {
            return base.Channel.GetByEmailAsync(mail);
        }
    }
}
